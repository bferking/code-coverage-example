name: .NET Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test Demo-App.sln --no-build --configuration Release --collect:"XPlat Code Coverage;Format=json,lcov,cobertura" --results-directory ./coverage

    - name: Produce the coverage report
      uses: insightsengineering/coverage-action@v2
      with:
        # Path to the Cobertura XML report.
        path: coverage/**/coverage.cobertura.xml
        # Minimum total coverage, if you want to the
        # workflow to enforce it as a standard.
        # This has no effect if the `fail` arg is set to `false`.
        threshold: 75
        # Fail the workflow if the minimum code coverage
        # reuqirements are not satisfied.
        fail: true
        # Publish the rendered output as a PR comment
        publish: true
        # Create a coverage diff report.
        diff: true
        # Branch to diff against.
        # Compare the current coverage to the coverage
        # determined on this branch.
        diff-branch: main
        # This is where the coverage reports for the
        # `diff-branch` are stored.
        # Branch is created if it doesn't already exist'.
        diff-storage: _xml_coverage_reports
        # A custom title that can be added to the code
        # coverage summary in the PR comment.
        coverage-summary-title: "Code Coverage Summary"
        storage-subdirectory: "Demo-App-Diff"
        new-uncovered-statements-failure: true
        token: ${{ secrets.GH_PAT }}

    # - name: Coverage Scope
    #   if: always()
    #   uses: DennisJensen95/coverage-scope@v0.5.1
    #   id: codecoverage
    #   with:
    #     # The coverage file path to parse
    #     coverage-filepath: coverage/**/coverage.cobertura.xml
    #     # The branch to determine coverage for
    #     branch: main # default is main
    #     # The threshold to determine if coverage for the changed files is acceptable
    #     threshold-change: 100 # default is 80
    #     # The threshold to determine if total coverage is acceptable
    #     threshold-total: 50 # default is 80

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: ReportGenerator
      if: always()
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.5
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: 'coveragereport'
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummary'

    - name: Upload coverage report artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport # Artifact name        
        path: coveragereport # Directory containing files to upload

    - name: Publish coverage in build summary # Testing to see
      if: always()
      run: cat coveragereport/Summary.md >> $GITHUB_STEP_SUMMARY # Adjust path and filename if necessary
      shell: bash
    
